// Copyright (c) 2023 Eleazar Garrido
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package grpc.sysinfo.v1;

option csharp_namespace = "Grpc.SysInfo.V1";
option go_package = "google.golang.org/grpc/health/grpc_sysinfo_v1";
option java_multiple_files = true;
option java_outer_classname = "SysInfoProto";
option java_package = "io.grpc.sysinfo.v1";


// The provided protocol buffer file defines messages and services for a SysInfoService,
// which allows clients to request information about memory, CPU, and disk usage in the system.
// The file includes several messages such as MemInfo and CpuInfo to hold specific system information.
// The SysInfoCheckRequest message allows clients to specify the type of information they want to retrieve,
// and the SysInfoCheckResponse message contains the requested system information.

// MemInfo message contains information about memory and swap usage in the system.
message MemInfo {
    // Total memory in the system (in bytes).
    uint64 mem_total = 1;
    // Free memory in the system (in bytes).
    uint64 mem_free = 2;
    // Available memory in the system (in bytes).
    uint64 mem_available = 3;
    // Total swap space in the system (in bytes).
    uint64 swap_total = 4;
    // Free swap space in the system (in bytes).
    uint64 swap_free = 5;
}

// CpuInfo message contains information about CPU usage and details in the system.
message CpuInfo {
    // Name of the CPU.
    string cpu_name = 1;
    // CPU usage as a floating-point value.
    float cpu_usage = 2;
    // CPU frequency (in Hz).
    uint64 frequency = 4;
    // Vendor ID of the CPU.
    string vendor_id = 5;
    // Brand/model of the CPU.
    string brand = 6;
}

// Represents information about a disk or storage device in the system.
message DiskInfo {
    // The name of the disk or storage device.
    string name = 1;
    // The type of file system used on the disk.
    string file_system = 2;
    // The mount point of the disk in the file system.
    string mount_point = 3;
    // The total available space on the disk, expressed in bytes.
    uint64 total_space = 4;
    // The currently available space on the disk, expressed in bytes.
    uint64 available_space = 5;
}

// SysInfoCheckRequest message is a request containing an InfoType enumeration that specifies the type of system information to retrieve.
message SysInfoCheckRequest {
    // Enumeration of possible system information types.
    enum InfoType {
        MEM_INFO = 0;
        CPU_INFO = 1;
        DISK_INFO = 2;
    }
    // List of InfoType values indicating the types of system information to retrieve.
    repeated InfoType info_type = 1;
}

// SysInfoCheckResponse message is a response containing a System message with system information.
message SysInfoCheckResponse {
    // Nested System message containing system information.
    message System {
        // Memory information in the system.
        MemInfo mem_info = 1;
        // List of CPU information in the system.
        repeated CpuInfo cpu_info = 2;
        // List of Disk information in the system.
        repeated DiskInfo disk_info = 3;
    }
    // System message containing the requested system information.
    System info = 1;
}

// SysInfoService is an RPC service that defines two methods:
// 1. Check: A unary RPC method that takes a SysInfoCheckRequest and returns a SysInfoCheckResponse. Used to perform a single check for system information.
// 2. Watch: A server-streaming RPC method that takes a SysInfoCheckRequest and returns a stream of SysInfoCheckResponse messages. Used to observe real-time changes in system information.
service SysInfoService {
    // Check method performs a single check for system information.
    rpc Check(SysInfoCheckRequest) returns (SysInfoCheckResponse);

    // Watch method returns a stream of system information for real-time observation of changes.
    rpc Watch(SysInfoCheckRequest) returns (stream SysInfoCheckResponse);
}